// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PeakLims.Databases;

#nullable disable

namespace PeakLims.Migrations
{
    [DbContext(typeof(PeakLimsDbContext))]
    [Migration("20240116020259_PanelOrdersOffOfAccession")]
    partial class PanelOrdersOffOfAccession
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("ACC")
                .StartsAt(10005702L);

            modelBuilder.HasSequence("PAT")
                .StartsAt(10045702L);

            modelBuilder.HasSequence("SAM")
                .StartsAt(10000202L);

            modelBuilder.Entity("PanelTest", b =>
                {
                    b.Property<Guid>("PanelsId")
                        .HasColumnType("uuid")
                        .HasColumnName("panels_id");

                    b.Property<Guid>("TestsId")
                        .HasColumnType("uuid")
                        .HasColumnName("tests_id");

                    b.HasKey("PanelsId", "TestsId")
                        .HasName("pk_panel_test");

                    b.HasIndex("TestsId")
                        .HasDatabaseName("ix_panel_test_tests_id");

                    b.ToTable("panel_test", (string)null);
                });

            modelBuilder.Entity("PeakLims.Domain.AccessionAttachments.AccessionAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AccessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("accession_id");

                    b.Property<string>("Comments")
                        .HasColumnType("text")
                        .HasColumnName("comments");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("Filename")
                        .HasColumnType("text")
                        .HasColumnName("filename");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<string>("S3Bucket")
                        .HasColumnType("text")
                        .HasColumnName("s3bucket");

                    b.HasKey("Id")
                        .HasName("pk_accession_attachments");

                    b.HasIndex("AccessionId")
                        .HasDatabaseName("ix_accession_attachments_accession_id");

                    b.ToTable("accession_attachments", (string)null);
                });

            modelBuilder.Entity("PeakLims.Domain.AccessionComments.AccessionComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AccessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("accession_id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_comment_id");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_accession_comments");

                    b.HasIndex("AccessionId")
                        .HasDatabaseName("ix_accession_comments_accession_id");

                    b.HasIndex("ParentCommentId")
                        .HasDatabaseName("ix_accession_comments_parent_comment_id");

                    b.ToTable("accession_comments", (string)null);
                });

            modelBuilder.Entity("PeakLims.Domain.AccessionContacts.AccessionContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AccessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("accession_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<Guid?>("HealthcareOrganizationContactId")
                        .HasColumnType("uuid")
                        .HasColumnName("healthcare_organization_contact_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<string>("TargetType")
                        .HasColumnType("text")
                        .HasColumnName("target_type");

                    b.Property<string>("TargetValue")
                        .HasColumnType("text")
                        .HasColumnName("target_value");

                    b.HasKey("Id")
                        .HasName("pk_accession_contacts");

                    b.HasIndex("AccessionId")
                        .HasDatabaseName("ix_accession_contacts_accession_id");

                    b.HasIndex("HealthcareOrganizationContactId")
                        .HasDatabaseName("ix_accession_contacts_healthcare_organization_contact_id");

                    b.ToTable("accession_contacts", (string)null);
                });

            modelBuilder.Entity("PeakLims.Domain.Accessions.Accession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AccessionNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("accession_number")
                        .HasDefaultValueSql("concat('ACC', nextval('\"ACC\"'))");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<Guid?>("HealthcareOrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("healthcare_organization_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_id");

                    b.HasKey("Id")
                        .HasName("pk_accessions");

                    b.HasIndex("HealthcareOrganizationId")
                        .HasDatabaseName("ix_accessions_healthcare_organization_id");

                    b.HasIndex("PatientId")
                        .HasDatabaseName("ix_accessions_patient_id");

                    b.ToTable("accessions", (string)null);
                });

            modelBuilder.Entity("PeakLims.Domain.Containers.Container", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("UsedFor")
                        .HasColumnType("text")
                        .HasColumnName("used_for");

                    b.HasKey("Id")
                        .HasName("pk_containers");

                    b.ToTable("containers", (string)null);
                });

            modelBuilder.Entity("PeakLims.Domain.HealthcareOrganizationContacts.HealthcareOrganizationContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<Guid?>("HealthcareOrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("healthcare_organization_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Npi")
                        .HasColumnType("text")
                        .HasColumnName("npi");

                    b.HasKey("Id")
                        .HasName("pk_healthcare_organization_contacts");

                    b.HasIndex("HealthcareOrganizationId")
                        .HasDatabaseName("ix_healthcare_organization_contacts_healthcare_organization_id");

                    b.ToTable("healthcare_organization_contacts", (string)null);
                });

            modelBuilder.Entity("PeakLims.Domain.HealthcareOrganizations.HealthcareOrganization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_healthcare_organizations");

                    b.ToTable("healthcare_organizations", (string)null);
                });

            modelBuilder.Entity("PeakLims.Domain.HipaaAuditLogs.HipaaAuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<string>("ActionBy")
                        .HasColumnType("text")
                        .HasColumnName("action_by");

                    b.Property<string>("Concept")
                        .HasColumnType("text")
                        .HasColumnName("concept");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Data")
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.Property<Guid>("Identifier")
                        .HasColumnType("uuid")
                        .HasColumnName("identifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<DateTimeOffset>("OccurredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_at");

                    b.HasKey("Id")
                        .HasName("pk_hipaa_audit_logs");

                    b.ToTable("hipaa_audit_logs", (string)null);
                });

            modelBuilder.Entity("PeakLims.Domain.PanelOrders.PanelOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AccessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("accession_id");

                    b.Property<string>("CancellationComments")
                        .HasColumnType("text")
                        .HasColumnName("cancellation_comments");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("text")
                        .HasColumnName("cancellation_reason");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<Guid?>("PanelId")
                        .HasColumnType("uuid")
                        .HasColumnName("panel_id");

                    b.HasKey("Id")
                        .HasName("pk_panel_orders");

                    b.HasIndex("AccessionId")
                        .HasDatabaseName("ix_panel_orders_accession_id");

                    b.HasIndex("PanelId")
                        .HasDatabaseName("ix_panel_orders_panel_id");

                    b.ToTable("panel_orders", (string)null);
                });

            modelBuilder.Entity("PeakLims.Domain.Panels.Panel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<string>("PanelCode")
                        .HasColumnType("text")
                        .HasColumnName("panel_code");

                    b.Property<string>("PanelName")
                        .HasColumnType("text")
                        .HasColumnName("panel_name");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_panels");

                    b.ToTable("panels", (string)null);
                });

            modelBuilder.Entity("PeakLims.Domain.Patients.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Ethnicity")
                        .HasColumnType("text")
                        .HasColumnName("ethnicity");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("InternalId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("internal_id")
                        .HasDefaultValueSql("concat('PAT', nextval('\"PAT\"'))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Race")
                        .HasColumnType("text")
                        .HasColumnName("race");

                    b.Property<string>("Sex")
                        .HasColumnType("text")
                        .HasColumnName("sex");

                    b.HasKey("Id")
                        .HasName("pk_patients");

                    b.ToTable("patients", (string)null);
                });

            modelBuilder.Entity("PeakLims.Domain.RolePermissions.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<string>("Permission")
                        .HasColumnType("text")
                        .HasColumnName("permission");

                    b.Property<string>("Role")
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("pk_role_permissions");

                    b.ToTable("role_permissions", (string)null);
                });

            modelBuilder.Entity("PeakLims.Domain.Samples.Sample", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly?>("CollectionDate")
                        .HasColumnType("date")
                        .HasColumnName("collection_date");

                    b.Property<string>("CollectionSite")
                        .HasColumnType("text")
                        .HasColumnName("collection_site");

                    b.Property<Guid?>("ContainerId")
                        .HasColumnType("uuid")
                        .HasColumnName("container_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text")
                        .HasColumnName("external_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<Guid?>("ParentSampleId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_sample_id");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_id");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.Property<DateOnly?>("ReceivedDate")
                        .HasColumnType("date")
                        .HasColumnName("received_date");

                    b.Property<string>("SampleNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("sample_number")
                        .HasDefaultValueSql("concat('SAM', nextval('\"SAM\"'))");

                    b.HasKey("Id")
                        .HasName("pk_samples");

                    b.HasIndex("ContainerId")
                        .HasDatabaseName("ix_samples_container_id");

                    b.HasIndex("ParentSampleId")
                        .HasDatabaseName("ix_samples_parent_sample_id");

                    b.HasIndex("PatientId")
                        .HasDatabaseName("ix_samples_patient_id");

                    b.ToTable("samples", (string)null);
                });

            modelBuilder.Entity("PeakLims.Domain.TestOrders.TestOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AccessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("accession_id");

                    b.Property<string>("CancellationComments")
                        .HasColumnType("text")
                        .HasColumnName("cancellation_comments");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("text")
                        .HasColumnName("cancellation_reason");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<DateOnly?>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("due_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<Guid?>("PanelOrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("panel_order_id");

                    b.Property<Guid?>("SampleId")
                        .HasColumnType("uuid")
                        .HasColumnName("sample_id");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int?>("TatSnapshot")
                        .HasColumnType("integer")
                        .HasColumnName("tat_snapshot");

                    b.Property<Guid?>("TestId")
                        .HasColumnType("uuid")
                        .HasColumnName("test_id");

                    b.HasKey("Id")
                        .HasName("pk_test_orders");

                    b.HasIndex("AccessionId")
                        .HasDatabaseName("ix_test_orders_accession_id");

                    b.HasIndex("PanelOrderId")
                        .HasDatabaseName("ix_test_orders_panel_order_id");

                    b.HasIndex("SampleId")
                        .HasDatabaseName("ix_test_orders_sample_id");

                    b.HasIndex("TestId")
                        .HasDatabaseName("ix_test_orders_test_id");

                    b.ToTable("test_orders", (string)null);
                });

            modelBuilder.Entity("PeakLims.Domain.Tests.Test", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<string>("Methodology")
                        .HasColumnType("text")
                        .HasColumnName("methodology");

                    b.Property<string>("Platform")
                        .HasColumnType("text")
                        .HasColumnName("platform");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("TestCode")
                        .HasColumnType("text")
                        .HasColumnName("test_code");

                    b.Property<string>("TestName")
                        .HasColumnType("text")
                        .HasColumnName("test_name");

                    b.Property<int>("TurnAroundTime")
                        .HasColumnType("integer")
                        .HasColumnName("turn_around_time");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_tests");

                    b.ToTable("tests", (string)null);
                });

            modelBuilder.Entity("PeakLims.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("Identifier")
                        .HasColumnType("text")
                        .HasColumnName("identifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("PeakLims.Domain.Users.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<string>("Role")
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_roles");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_roles_user_id");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("PanelTest", b =>
                {
                    b.HasOne("PeakLims.Domain.Panels.Panel", null)
                        .WithMany()
                        .HasForeignKey("PanelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_panel_test_panels_panels_id");

                    b.HasOne("PeakLims.Domain.Tests.Test", null)
                        .WithMany()
                        .HasForeignKey("TestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_panel_test_tests_tests_id");
                });

            modelBuilder.Entity("PeakLims.Domain.AccessionAttachments.AccessionAttachment", b =>
                {
                    b.HasOne("PeakLims.Domain.Accessions.Accession", "Accession")
                        .WithMany("AccessionAttachments")
                        .HasForeignKey("AccessionId")
                        .HasConstraintName("fk_accession_attachments_accessions_accession_id");

                    b.OwnsOne("PeakLims.Domain.AccessionAttachments.AccessionAttachmentType", "Type", b1 =>
                        {
                            b1.Property<Guid>("AccessionAttachmentId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .HasColumnType("text")
                                .HasColumnName("type");

                            b1.HasKey("AccessionAttachmentId");

                            b1.ToTable("accession_attachments");

                            b1.WithOwner()
                                .HasForeignKey("AccessionAttachmentId")
                                .HasConstraintName("fk_accession_attachments_accession_attachments_id");
                        });

                    b.OwnsOne("PeakLims.Domain.S3Keys.S3Key", "S3Key", b1 =>
                        {
                            b1.Property<Guid>("AccessionAttachmentId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .HasColumnType("text")
                                .HasColumnName("s3key");

                            b1.HasKey("AccessionAttachmentId");

                            b1.ToTable("accession_attachments");

                            b1.WithOwner()
                                .HasForeignKey("AccessionAttachmentId")
                                .HasConstraintName("fk_accession_attachments_accession_attachments_id");
                        });

                    b.Navigation("Accession");

                    b.Navigation("S3Key")
                        .IsRequired();

                    b.Navigation("Type")
                        .IsRequired();
                });

            modelBuilder.Entity("PeakLims.Domain.AccessionComments.AccessionComment", b =>
                {
                    b.HasOne("PeakLims.Domain.Accessions.Accession", "Accession")
                        .WithMany("Comments")
                        .HasForeignKey("AccessionId")
                        .HasConstraintName("fk_accession_comments_accessions_accession_id");

                    b.HasOne("PeakLims.Domain.AccessionComments.AccessionComment", "ParentComment")
                        .WithMany()
                        .HasForeignKey("ParentCommentId")
                        .HasConstraintName("fk_accession_comments_accession_comments_parent_comment_id");

                    b.Navigation("Accession");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("PeakLims.Domain.AccessionContacts.AccessionContact", b =>
                {
                    b.HasOne("PeakLims.Domain.Accessions.Accession", "Accession")
                        .WithMany("AccessionContacts")
                        .HasForeignKey("AccessionId")
                        .HasConstraintName("fk_accession_contacts_accessions_accession_id");

                    b.HasOne("PeakLims.Domain.HealthcareOrganizationContacts.HealthcareOrganizationContact", "HealthcareOrganizationContact")
                        .WithMany("Accessions")
                        .HasForeignKey("HealthcareOrganizationContactId")
                        .HasConstraintName("fk_accession_contacts_healthcare_organization_contacts_healthc");

                    b.Navigation("Accession");

                    b.Navigation("HealthcareOrganizationContact");
                });

            modelBuilder.Entity("PeakLims.Domain.Accessions.Accession", b =>
                {
                    b.HasOne("PeakLims.Domain.HealthcareOrganizations.HealthcareOrganization", "HealthcareOrganization")
                        .WithMany("Accessions")
                        .HasForeignKey("HealthcareOrganizationId")
                        .HasConstraintName("fk_accessions_healthcare_organizations_healthcare_organization");

                    b.HasOne("PeakLims.Domain.Patients.Patient", "Patient")
                        .WithMany("Accessions")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("fk_accessions_patients_patient_id");

                    b.OwnsOne("PeakLims.Domain.AccessionStatuses.AccessionStatus", "Status", b1 =>
                        {
                            b1.Property<Guid>("AccessionId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .HasColumnType("text")
                                .HasColumnName("status");

                            b1.HasKey("AccessionId");

                            b1.ToTable("accessions");

                            b1.WithOwner()
                                .HasForeignKey("AccessionId")
                                .HasConstraintName("fk_accessions_accessions_id");
                        });

                    b.Navigation("HealthcareOrganization");

                    b.Navigation("Patient");

                    b.Navigation("Status")
                        .IsRequired();
                });

            modelBuilder.Entity("PeakLims.Domain.HealthcareOrganizationContacts.HealthcareOrganizationContact", b =>
                {
                    b.HasOne("PeakLims.Domain.HealthcareOrganizations.HealthcareOrganization", "HealthcareOrganization")
                        .WithMany("HealthcareOrganizationContacts")
                        .HasForeignKey("HealthcareOrganizationId")
                        .HasConstraintName("fk_healthcare_organization_contacts_healthcare_organizations_h");

                    b.Navigation("HealthcareOrganization");
                });

            modelBuilder.Entity("PeakLims.Domain.PanelOrders.PanelOrder", b =>
                {
                    b.HasOne("PeakLims.Domain.Accessions.Accession", "Accession")
                        .WithMany("PanelOrders")
                        .HasForeignKey("AccessionId")
                        .HasConstraintName("fk_panel_orders_accessions_accession_id");

                    b.HasOne("PeakLims.Domain.Panels.Panel", "Panel")
                        .WithMany("PanelOrders")
                        .HasForeignKey("PanelId")
                        .HasConstraintName("fk_panel_orders_panels_panel_id");

                    b.Navigation("Accession");

                    b.Navigation("Panel");
                });

            modelBuilder.Entity("PeakLims.Domain.Patients.Patient", b =>
                {
                    b.OwnsOne("PeakLims.Domain.Lifespans.Lifespan", "Lifespan", b1 =>
                        {
                            b1.Property<Guid>("PatientId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateOnly?>("DateOfBirth")
                                .HasColumnType("date")
                                .HasColumnName("date_of_birth");

                            b1.Property<int?>("KnownAge")
                                .HasColumnType("integer")
                                .HasColumnName("known_age");

                            b1.HasKey("PatientId");

                            b1.ToTable("patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId")
                                .HasConstraintName("fk_patients_patients_id");
                        });

                    b.Navigation("Lifespan")
                        .IsRequired();
                });

            modelBuilder.Entity("PeakLims.Domain.Samples.Sample", b =>
                {
                    b.HasOne("PeakLims.Domain.Containers.Container", "Container")
                        .WithMany("Samples")
                        .HasForeignKey("ContainerId")
                        .HasConstraintName("fk_samples_containers_container_id");

                    b.HasOne("PeakLims.Domain.Samples.Sample", "ParentSample")
                        .WithMany()
                        .HasForeignKey("ParentSampleId")
                        .HasConstraintName("fk_samples_samples_parent_sample_id");

                    b.HasOne("PeakLims.Domain.Patients.Patient", "Patient")
                        .WithMany("Samples")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("fk_samples_patients_patient_id");

                    b.OwnsOne("PeakLims.Domain.SampleStatuses.SampleStatus", "Status", b1 =>
                        {
                            b1.Property<Guid>("SampleId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .HasColumnType("text")
                                .HasColumnName("status");

                            b1.HasKey("SampleId");

                            b1.ToTable("samples");

                            b1.WithOwner()
                                .HasForeignKey("SampleId")
                                .HasConstraintName("fk_samples_samples_id");
                        });

                    b.OwnsOne("PeakLims.Domain.SampleTypes.SampleType", "Type", b1 =>
                        {
                            b1.Property<Guid>("SampleId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .HasColumnType("text")
                                .HasColumnName("type");

                            b1.HasKey("SampleId");

                            b1.ToTable("samples");

                            b1.WithOwner()
                                .HasForeignKey("SampleId")
                                .HasConstraintName("fk_samples_samples_id");
                        });

                    b.Navigation("Container");

                    b.Navigation("ParentSample");

                    b.Navigation("Patient");

                    b.Navigation("Status")
                        .IsRequired();

                    b.Navigation("Type")
                        .IsRequired();
                });

            modelBuilder.Entity("PeakLims.Domain.TestOrders.TestOrder", b =>
                {
                    b.HasOne("PeakLims.Domain.Accessions.Accession", "Accession")
                        .WithMany("TestOrders")
                        .HasForeignKey("AccessionId")
                        .HasConstraintName("fk_test_orders_accessions_accession_id");

                    b.HasOne("PeakLims.Domain.PanelOrders.PanelOrder", "PanelOrder")
                        .WithMany("TestOrders")
                        .HasForeignKey("PanelOrderId")
                        .HasConstraintName("fk_test_orders_panel_orders_panel_order_id");

                    b.HasOne("PeakLims.Domain.Samples.Sample", "Sample")
                        .WithMany("TestOrders")
                        .HasForeignKey("SampleId")
                        .HasConstraintName("fk_test_orders_samples_sample_id");

                    b.HasOne("PeakLims.Domain.Tests.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .HasConstraintName("fk_test_orders_tests_test_id");

                    b.Navigation("Accession");

                    b.Navigation("PanelOrder");

                    b.Navigation("Sample");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("PeakLims.Domain.Users.UserRole", b =>
                {
                    b.HasOne("PeakLims.Domain.Users.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_roles_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PeakLims.Domain.Accessions.Accession", b =>
                {
                    b.Navigation("AccessionAttachments");

                    b.Navigation("AccessionContacts");

                    b.Navigation("Comments");

                    b.Navigation("PanelOrders");

                    b.Navigation("TestOrders");
                });

            modelBuilder.Entity("PeakLims.Domain.Containers.Container", b =>
                {
                    b.Navigation("Samples");
                });

            modelBuilder.Entity("PeakLims.Domain.HealthcareOrganizationContacts.HealthcareOrganizationContact", b =>
                {
                    b.Navigation("Accessions");
                });

            modelBuilder.Entity("PeakLims.Domain.HealthcareOrganizations.HealthcareOrganization", b =>
                {
                    b.Navigation("Accessions");

                    b.Navigation("HealthcareOrganizationContacts");
                });

            modelBuilder.Entity("PeakLims.Domain.PanelOrders.PanelOrder", b =>
                {
                    b.Navigation("TestOrders");
                });

            modelBuilder.Entity("PeakLims.Domain.Panels.Panel", b =>
                {
                    b.Navigation("PanelOrders");
                });

            modelBuilder.Entity("PeakLims.Domain.Patients.Patient", b =>
                {
                    b.Navigation("Accessions");

                    b.Navigation("Samples");
                });

            modelBuilder.Entity("PeakLims.Domain.Samples.Sample", b =>
                {
                    b.Navigation("TestOrders");
                });

            modelBuilder.Entity("PeakLims.Domain.Users.User", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
